#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DbClassesBell
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DbBella")]
	public partial class BellaDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertDish(Dish instance);
    partial void UpdateDish(Dish instance);
    partial void DeleteDish(Dish instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertImageForDish(ImageForDish instance);
    partial void UpdateImageForDish(ImageForDish instance);
    partial void DeleteImageForDish(ImageForDish instance);
    partial void InsertKind(Kind instance);
    partial void UpdateKind(Kind instance);
    partial void DeleteKind(Kind instance);
    partial void InsertMenu(Menu instance);
    partial void UpdateMenu(Menu instance);
    partial void DeleteMenu(Menu instance);
    partial void InsertMenuDish(MenuDish instance);
    partial void UpdateMenuDish(MenuDish instance);
    partial void DeleteMenuDish(MenuDish instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertOrderDish(OrderDish instance);
    partial void UpdateOrderDish(OrderDish instance);
    partial void DeleteOrderDish(OrderDish instance);
    partial void InsertOrderMenu(OrderMenu instance);
    partial void UpdateOrderMenu(OrderMenu instance);
    partial void DeleteOrderMenu(OrderMenu instance);
    partial void InsertPortion(Portion instance);
    partial void UpdatePortion(Portion instance);
    partial void DeletePortion(Portion instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertRecall(Recall instance);
    partial void UpdateRecall(Recall instance);
    partial void DeleteRecall(Recall instance);
    partial void InsertRecept(Recept instance);
    partial void UpdateRecept(Recept instance);
    partial void DeleteRecept(Recept instance);
    partial void InsertRepast(Repast instance);
    partial void UpdateRepast(Repast instance);
    partial void DeleteRepast(Repast instance);
    #endregion
		
		public BellaDBDataContext() : 
				base(global::DbClassesBell.Properties.Settings.Default.DbBellaConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public BellaDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BellaDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BellaDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BellaDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Dish> Dishs
		{
			get
			{
				return this.GetTable<Dish>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<ImageForDish> ImageForDishs
		{
			get
			{
				return this.GetTable<ImageForDish>();
			}
		}
		
		public System.Data.Linq.Table<Kind> Kinds
		{
			get
			{
				return this.GetTable<Kind>();
			}
		}
		
		public System.Data.Linq.Table<Menu> Menus
		{
			get
			{
				return this.GetTable<Menu>();
			}
		}
		
		public System.Data.Linq.Table<MenuDish> MenuDishs
		{
			get
			{
				return this.GetTable<MenuDish>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<OrderDish> OrderDishs
		{
			get
			{
				return this.GetTable<OrderDish>();
			}
		}
		
		public System.Data.Linq.Table<OrderMenu> OrderMenus
		{
			get
			{
				return this.GetTable<OrderMenu>();
			}
		}
		
		public System.Data.Linq.Table<Portion> Portions
		{
			get
			{
				return this.GetTable<Portion>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Recall> Recalls
		{
			get
			{
				return this.GetTable<Recall>();
			}
		}
		
		public System.Data.Linq.Table<Recept> Recepts
		{
			get
			{
				return this.GetTable<Recept>();
			}
		}
		
		public System.Data.Linq.Table<Repast> Repasts
		{
			get
			{
				return this.GetTable<Repast>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dish")]
	public partial class Dish : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DishId;
		
		private string _Name;
		
		private string _Base;
		
		private string _Difficult;
		
		private int _KindId;
		
		private System.Nullable<decimal> _Price;
		
		private EntitySet<ImageForDish> _ImageForDish;
		
		private EntitySet<MenuDish> _MenuDish;
		
		private EntitySet<OrderDish> _OrderDish;
		
		private EntitySet<Portion> _Portion;
		
		private EntitySet<Recall> _Recall;
		
		private EntitySet<Recept> _Recept;
		
		private EntityRef<Kind> _Kind;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDishIdChanging(int value);
    partial void OnDishIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBaseChanging(string value);
    partial void OnBaseChanged();
    partial void OnDifficultChanging(string value);
    partial void OnDifficultChanged();
    partial void OnKindIdChanging(int value);
    partial void OnKindIdChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    #endregion
		
		public Dish()
		{
			this._ImageForDish = new EntitySet<ImageForDish>(new Action<ImageForDish>(this.attach_ImageForDish), new Action<ImageForDish>(this.detach_ImageForDish));
			this._MenuDish = new EntitySet<MenuDish>(new Action<MenuDish>(this.attach_MenuDish), new Action<MenuDish>(this.detach_MenuDish));
			this._OrderDish = new EntitySet<OrderDish>(new Action<OrderDish>(this.attach_OrderDish), new Action<OrderDish>(this.detach_OrderDish));
			this._Portion = new EntitySet<Portion>(new Action<Portion>(this.attach_Portion), new Action<Portion>(this.detach_Portion));
			this._Recall = new EntitySet<Recall>(new Action<Recall>(this.attach_Recall), new Action<Recall>(this.detach_Recall));
			this._Recept = new EntitySet<Recept>(new Action<Recept>(this.attach_Recept), new Action<Recept>(this.detach_Recept));
			this._Kind = default(EntityRef<Kind>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DishId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DishId
		{
			get
			{
				return this._DishId;
			}
			set
			{
				if ((this._DishId != value))
				{
					this.OnDishIdChanging(value);
					this.SendPropertyChanging();
					this._DishId = value;
					this.SendPropertyChanged("DishId");
					this.OnDishIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Base", DbType="NVarChar(15)")]
		public string Base
		{
			get
			{
				return this._Base;
			}
			set
			{
				if ((this._Base != value))
				{
					this.OnBaseChanging(value);
					this.SendPropertyChanging();
					this._Base = value;
					this.SendPropertyChanged("Base");
					this.OnBaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Difficult", DbType="NVarChar(15)")]
		public string Difficult
		{
			get
			{
				return this._Difficult;
			}
			set
			{
				if ((this._Difficult != value))
				{
					this.OnDifficultChanging(value);
					this.SendPropertyChanging();
					this._Difficult = value;
					this.SendPropertyChanged("Difficult");
					this.OnDifficultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KindId", DbType="Int NOT NULL")]
		public int KindId
		{
			get
			{
				return this._KindId;
			}
			set
			{
				if ((this._KindId != value))
				{
					if (this._Kind.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKindIdChanging(value);
					this.SendPropertyChanging();
					this._KindId = value;
					this.SendPropertyChanged("KindId");
					this.OnKindIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_ImageForDish", Storage="_ImageForDish", ThisKey="DishId", OtherKey="DishId")]
		public EntitySet<ImageForDish> ImageForDish
		{
			get
			{
				return this._ImageForDish;
			}
			set
			{
				this._ImageForDish.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_MenuDish", Storage="_MenuDish", ThisKey="DishId", OtherKey="DishId")]
		public EntitySet<MenuDish> MenuDish
		{
			get
			{
				return this._MenuDish;
			}
			set
			{
				this._MenuDish.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_OrderDish", Storage="_OrderDish", ThisKey="DishId", OtherKey="DishId")]
		public EntitySet<OrderDish> OrderDish
		{
			get
			{
				return this._OrderDish;
			}
			set
			{
				this._OrderDish.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_Portion", Storage="_Portion", ThisKey="DishId", OtherKey="DishId")]
		public EntitySet<Portion> Portion
		{
			get
			{
				return this._Portion;
			}
			set
			{
				this._Portion.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_Recall", Storage="_Recall", ThisKey="DishId", OtherKey="DishId")]
		public EntitySet<Recall> Recall
		{
			get
			{
				return this._Recall;
			}
			set
			{
				this._Recall.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_Recept", Storage="_Recept", ThisKey="DishId", OtherKey="DishId")]
		public EntitySet<Recept> Recept
		{
			get
			{
				return this._Recept;
			}
			set
			{
				this._Recept.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kind_Dish", Storage="_Kind", ThisKey="KindId", OtherKey="KindId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Kind Kind
		{
			get
			{
				return this._Kind.Entity;
			}
			set
			{
				Kind previousValue = this._Kind.Entity;
				if (((previousValue != value) 
							|| (this._Kind.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Kind.Entity = null;
						previousValue.Dish.Remove(this);
					}
					this._Kind.Entity = value;
					if ((value != null))
					{
						value.Dish.Add(this);
						this._KindId = value.KindId;
					}
					else
					{
						this._KindId = default(int);
					}
					this.SendPropertyChanged("Kind");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ImageForDish(ImageForDish entity)
		{
			this.SendPropertyChanging();
			entity.Dish = this;
		}
		
		private void detach_ImageForDish(ImageForDish entity)
		{
			this.SendPropertyChanging();
			entity.Dish = null;
		}
		
		private void attach_MenuDish(MenuDish entity)
		{
			this.SendPropertyChanging();
			entity.Dish = this;
		}
		
		private void detach_MenuDish(MenuDish entity)
		{
			this.SendPropertyChanging();
			entity.Dish = null;
		}
		
		private void attach_OrderDish(OrderDish entity)
		{
			this.SendPropertyChanging();
			entity.Dish = this;
		}
		
		private void detach_OrderDish(OrderDish entity)
		{
			this.SendPropertyChanging();
			entity.Dish = null;
		}
		
		private void attach_Portion(Portion entity)
		{
			this.SendPropertyChanging();
			entity.Dish = this;
		}
		
		private void detach_Portion(Portion entity)
		{
			this.SendPropertyChanging();
			entity.Dish = null;
		}
		
		private void attach_Recall(Recall entity)
		{
			this.SendPropertyChanging();
			entity.Dish = this;
		}
		
		private void detach_Recall(Recall entity)
		{
			this.SendPropertyChanging();
			entity.Dish = null;
		}
		
		private void attach_Recept(Recept entity)
		{
			this.SendPropertyChanging();
			entity.Dish = this;
		}
		
		private void detach_Recept(Recept entity)
		{
			this.SendPropertyChanging();
			entity.Dish = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _email;
		
		private string _password;
		
		private string _Adress;
		
		private string _Telephone;
		
		private string _Status;
		
		private EntitySet<Order> _Order;
		
		private EntitySet<Recall> _Recall;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnAdressChanging(string value);
    partial void OnAdressChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public User()
		{
			this._Order = new EntitySet<Order>(new Action<Order>(this.attach_Order), new Action<Order>(this.detach_Order));
			this._Recall = new EntitySet<Recall>(new Action<Recall>(this.attach_Recall), new Action<Recall>(this.detach_Recall));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adress", DbType="NVarChar(50)")]
		public string Adress
		{
			get
			{
				return this._Adress;
			}
			set
			{
				if ((this._Adress != value))
				{
					this.OnAdressChanging(value);
					this.SendPropertyChanging();
					this._Adress = value;
					this.SendPropertyChanged("Adress");
					this.OnAdressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telephone", DbType="NVarChar(50)")]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Order", Storage="_Order", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Order> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				this._Order.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Recall", Storage="_Recall", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Recall> Recall
		{
			get
			{
				return this._Recall;
			}
			set
			{
				this._Recall.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Recall(Recall entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Recall(Recall entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImageForDish")]
	public partial class ImageForDish : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ImageId;
		
		private int _DishId;
		
		private string _Image;
		
		private EntityRef<Dish> _Dish;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImageIdChanging(int value);
    partial void OnImageIdChanged();
    partial void OnDishIdChanging(int value);
    partial void OnDishIdChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    #endregion
		
		public ImageForDish()
		{
			this._Dish = default(EntityRef<Dish>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ImageId
		{
			get
			{
				return this._ImageId;
			}
			set
			{
				if ((this._ImageId != value))
				{
					this.OnImageIdChanging(value);
					this.SendPropertyChanging();
					this._ImageId = value;
					this.SendPropertyChanged("ImageId");
					this.OnImageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DishId", DbType="Int NOT NULL")]
		public int DishId
		{
			get
			{
				return this._DishId;
			}
			set
			{
				if ((this._DishId != value))
				{
					if (this._Dish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDishIdChanging(value);
					this.SendPropertyChanging();
					this._DishId = value;
					this.SendPropertyChanged("DishId");
					this.OnDishIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_ImageForDish", Storage="_Dish", ThisKey="DishId", OtherKey="DishId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Dish Dish
		{
			get
			{
				return this._Dish.Entity;
			}
			set
			{
				Dish previousValue = this._Dish.Entity;
				if (((previousValue != value) 
							|| (this._Dish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dish.Entity = null;
						previousValue.ImageForDish.Remove(this);
					}
					this._Dish.Entity = value;
					if ((value != null))
					{
						value.ImageForDish.Add(this);
						this._DishId = value.DishId;
					}
					else
					{
						this._DishId = default(int);
					}
					this.SendPropertyChanged("Dish");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Kind")]
	public partial class Kind : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _KindId;
		
		private string _Name;
		
		private EntitySet<Dish> _Dish;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKindIdChanging(int value);
    partial void OnKindIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Kind()
		{
			this._Dish = new EntitySet<Dish>(new Action<Dish>(this.attach_Dish), new Action<Dish>(this.detach_Dish));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KindId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int KindId
		{
			get
			{
				return this._KindId;
			}
			set
			{
				if ((this._KindId != value))
				{
					this.OnKindIdChanging(value);
					this.SendPropertyChanging();
					this._KindId = value;
					this.SendPropertyChanged("KindId");
					this.OnKindIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kind_Dish", Storage="_Dish", ThisKey="KindId", OtherKey="KindId")]
		public EntitySet<Dish> Dish
		{
			get
			{
				return this._Dish;
			}
			set
			{
				this._Dish.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dish(Dish entity)
		{
			this.SendPropertyChanging();
			entity.Kind = this;
		}
		
		private void detach_Dish(Dish entity)
		{
			this.SendPropertyChanging();
			entity.Kind = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Menu")]
	public partial class Menu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MenuId;
		
		private string _Name;
		
		private string _Text;
		
		private decimal _Price;
		
		private EntitySet<MenuDish> _MenuDish;
		
		private EntitySet<OrderMenu> _OrderMenu;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenuIdChanging(int value);
    partial void OnMenuIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public Menu()
		{
			this._MenuDish = new EntitySet<MenuDish>(new Action<MenuDish>(this.attach_MenuDish), new Action<MenuDish>(this.detach_MenuDish));
			this._OrderMenu = new EntitySet<OrderMenu>(new Action<OrderMenu>(this.attach_OrderMenu), new Action<OrderMenu>(this.detach_OrderMenu));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MenuId
		{
			get
			{
				return this._MenuId;
			}
			set
			{
				if ((this._MenuId != value))
				{
					this.OnMenuIdChanging(value);
					this.SendPropertyChanging();
					this._MenuId = value;
					this.SendPropertyChanged("MenuId");
					this.OnMenuIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_MenuDish", Storage="_MenuDish", ThisKey="MenuId", OtherKey="MenuId")]
		public EntitySet<MenuDish> MenuDish
		{
			get
			{
				return this._MenuDish;
			}
			set
			{
				this._MenuDish.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_OrderMenu", Storage="_OrderMenu", ThisKey="MenuId", OtherKey="MenuId")]
		public EntitySet<OrderMenu> OrderMenu
		{
			get
			{
				return this._OrderMenu;
			}
			set
			{
				this._OrderMenu.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MenuDish(MenuDish entity)
		{
			this.SendPropertyChanging();
			entity.Menu = this;
		}
		
		private void detach_MenuDish(MenuDish entity)
		{
			this.SendPropertyChanging();
			entity.Menu = null;
		}
		
		private void attach_OrderMenu(OrderMenu entity)
		{
			this.SendPropertyChanging();
			entity.Menu = this;
		}
		
		private void detach_OrderMenu(OrderMenu entity)
		{
			this.SendPropertyChanging();
			entity.Menu = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MenuDish")]
	public partial class MenuDish : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MenuDishId;
		
		private int _DishId;
		
		private int _MenuId;
		
		private int _RepastId;
		
		private EntityRef<Dish> _Dish;
		
		private EntityRef<Menu> _Menu;
		
		private EntityRef<Repast> _Repast;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenuDishIdChanging(int value);
    partial void OnMenuDishIdChanged();
    partial void OnDishIdChanging(int value);
    partial void OnDishIdChanged();
    partial void OnMenuIdChanging(int value);
    partial void OnMenuIdChanged();
    partial void OnRepastIdChanging(int value);
    partial void OnRepastIdChanged();
    #endregion
		
		public MenuDish()
		{
			this._Dish = default(EntityRef<Dish>);
			this._Menu = default(EntityRef<Menu>);
			this._Repast = default(EntityRef<Repast>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuDishId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MenuDishId
		{
			get
			{
				return this._MenuDishId;
			}
			set
			{
				if ((this._MenuDishId != value))
				{
					this.OnMenuDishIdChanging(value);
					this.SendPropertyChanging();
					this._MenuDishId = value;
					this.SendPropertyChanged("MenuDishId");
					this.OnMenuDishIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DishId", DbType="Int NOT NULL")]
		public int DishId
		{
			get
			{
				return this._DishId;
			}
			set
			{
				if ((this._DishId != value))
				{
					if (this._Dish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDishIdChanging(value);
					this.SendPropertyChanging();
					this._DishId = value;
					this.SendPropertyChanged("DishId");
					this.OnDishIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuId", DbType="Int NOT NULL")]
		public int MenuId
		{
			get
			{
				return this._MenuId;
			}
			set
			{
				if ((this._MenuId != value))
				{
					if (this._Menu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMenuIdChanging(value);
					this.SendPropertyChanging();
					this._MenuId = value;
					this.SendPropertyChanged("MenuId");
					this.OnMenuIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepastId", DbType="Int NOT NULL")]
		public int RepastId
		{
			get
			{
				return this._RepastId;
			}
			set
			{
				if ((this._RepastId != value))
				{
					if (this._Repast.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepastIdChanging(value);
					this.SendPropertyChanging();
					this._RepastId = value;
					this.SendPropertyChanged("RepastId");
					this.OnRepastIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_MenuDish", Storage="_Dish", ThisKey="DishId", OtherKey="DishId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Dish Dish
		{
			get
			{
				return this._Dish.Entity;
			}
			set
			{
				Dish previousValue = this._Dish.Entity;
				if (((previousValue != value) 
							|| (this._Dish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dish.Entity = null;
						previousValue.MenuDish.Remove(this);
					}
					this._Dish.Entity = value;
					if ((value != null))
					{
						value.MenuDish.Add(this);
						this._DishId = value.DishId;
					}
					else
					{
						this._DishId = default(int);
					}
					this.SendPropertyChanged("Dish");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_MenuDish", Storage="_Menu", ThisKey="MenuId", OtherKey="MenuId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Menu Menu
		{
			get
			{
				return this._Menu.Entity;
			}
			set
			{
				Menu previousValue = this._Menu.Entity;
				if (((previousValue != value) 
							|| (this._Menu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Menu.Entity = null;
						previousValue.MenuDish.Remove(this);
					}
					this._Menu.Entity = value;
					if ((value != null))
					{
						value.MenuDish.Add(this);
						this._MenuId = value.MenuId;
					}
					else
					{
						this._MenuId = default(int);
					}
					this.SendPropertyChanged("Menu");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Repast_MenuDish", Storage="_Repast", ThisKey="RepastId", OtherKey="RepastId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Repast Repast
		{
			get
			{
				return this._Repast.Entity;
			}
			set
			{
				Repast previousValue = this._Repast.Entity;
				if (((previousValue != value) 
							|| (this._Repast.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Repast.Entity = null;
						previousValue.MenuDish.Remove(this);
					}
					this._Repast.Entity = value;
					if ((value != null))
					{
						value.MenuDish.Add(this);
						this._RepastId = value.RepastId;
					}
					else
					{
						this._RepastId = default(int);
					}
					this.SendPropertyChanged("Repast");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderId;
		
		private int _UserId;
		
		private string _State;
		
		private decimal _Price;
		
		private EntitySet<OrderDish> _OrderDish;
		
		private EntitySet<OrderMenu> _OrderMenu;
		
		private EntityRef<User> _User;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public Order()
		{
			this._OrderDish = new EntitySet<OrderDish>(new Action<OrderDish>(this.attach_OrderDish), new Action<OrderDish>(this.detach_OrderDish));
			this._OrderMenu = new EntitySet<OrderMenu>(new Action<OrderMenu>(this.attach_OrderMenu), new Action<OrderMenu>(this.detach_OrderMenu));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="NVarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDish", Storage="_OrderDish", ThisKey="OrderId", OtherKey="OrderId")]
		public EntitySet<OrderDish> OrderDish
		{
			get
			{
				return this._OrderDish;
			}
			set
			{
				this._OrderDish.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderMenu", Storage="_OrderMenu", ThisKey="OrderId", OtherKey="OrderId")]
		public EntitySet<OrderMenu> OrderMenu
		{
			get
			{
				return this._OrderMenu;
			}
			set
			{
				this._OrderMenu.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Order", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Order.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Order.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDish(OrderDish entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderDish(OrderDish entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_OrderMenu(OrderMenu entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderMenu(OrderMenu entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDish")]
	public partial class OrderDish : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderId;
		
		private int _DishId;
		
		private int _OrderDishId;
		
		private int _Count;
		
		private EntityRef<Dish> _Dish;
		
		private EntityRef<Order> _Order;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnDishIdChanging(int value);
    partial void OnDishIdChanged();
    partial void OnOrderDishIdChanging(int value);
    partial void OnOrderDishIdChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    #endregion
		
		public OrderDish()
		{
			this._Dish = default(EntityRef<Dish>);
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int NOT NULL")]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DishId", DbType="Int NOT NULL")]
		public int DishId
		{
			get
			{
				return this._DishId;
			}
			set
			{
				if ((this._DishId != value))
				{
					if (this._Dish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDishIdChanging(value);
					this.SendPropertyChanging();
					this._DishId = value;
					this.SendPropertyChanged("DishId");
					this.OnDishIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDishId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderDishId
		{
			get
			{
				return this._OrderDishId;
			}
			set
			{
				if ((this._OrderDishId != value))
				{
					this.OnOrderDishIdChanging(value);
					this.SendPropertyChanging();
					this._OrderDishId = value;
					this.SendPropertyChanged("OrderDishId");
					this.OnOrderDishIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count", DbType="Int NOT NULL")]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_OrderDish", Storage="_Dish", ThisKey="DishId", OtherKey="DishId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Dish Dish
		{
			get
			{
				return this._Dish.Entity;
			}
			set
			{
				Dish previousValue = this._Dish.Entity;
				if (((previousValue != value) 
							|| (this._Dish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dish.Entity = null;
						previousValue.OrderDish.Remove(this);
					}
					this._Dish.Entity = value;
					if ((value != null))
					{
						value.OrderDish.Add(this);
						this._DishId = value.DishId;
					}
					else
					{
						this._DishId = default(int);
					}
					this.SendPropertyChanged("Dish");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDish", Storage="_Order", ThisKey="OrderId", OtherKey="OrderId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderDish.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderDish.Add(this);
						this._OrderId = value.OrderId;
					}
					else
					{
						this._OrderId = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderMenu")]
	public partial class OrderMenu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderId;
		
		private int _MenuId;
		
		private int _OrderMenuId;
		
		private int _Count;
		
		private EntityRef<Menu> _Menu;
		
		private EntityRef<Order> _Order;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnMenuIdChanging(int value);
    partial void OnMenuIdChanged();
    partial void OnOrderMenuIdChanging(int value);
    partial void OnOrderMenuIdChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    #endregion
		
		public OrderMenu()
		{
			this._Menu = default(EntityRef<Menu>);
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int NOT NULL")]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuId", DbType="Int NOT NULL")]
		public int MenuId
		{
			get
			{
				return this._MenuId;
			}
			set
			{
				if ((this._MenuId != value))
				{
					if (this._Menu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMenuIdChanging(value);
					this.SendPropertyChanging();
					this._MenuId = value;
					this.SendPropertyChanged("MenuId");
					this.OnMenuIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderMenuId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderMenuId
		{
			get
			{
				return this._OrderMenuId;
			}
			set
			{
				if ((this._OrderMenuId != value))
				{
					this.OnOrderMenuIdChanging(value);
					this.SendPropertyChanging();
					this._OrderMenuId = value;
					this.SendPropertyChanged("OrderMenuId");
					this.OnOrderMenuIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count", DbType="Int NOT NULL")]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_OrderMenu", Storage="_Menu", ThisKey="MenuId", OtherKey="MenuId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Menu Menu
		{
			get
			{
				return this._Menu.Entity;
			}
			set
			{
				Menu previousValue = this._Menu.Entity;
				if (((previousValue != value) 
							|| (this._Menu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Menu.Entity = null;
						previousValue.OrderMenu.Remove(this);
					}
					this._Menu.Entity = value;
					if ((value != null))
					{
						value.OrderMenu.Add(this);
						this._MenuId = value.MenuId;
					}
					else
					{
						this._MenuId = default(int);
					}
					this.SendPropertyChanged("Menu");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderMenu", Storage="_Order", ThisKey="OrderId", OtherKey="OrderId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderMenu.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderMenu.Add(this);
						this._OrderId = value.OrderId;
					}
					else
					{
						this._OrderId = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Portion")]
	public partial class Portion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PortionId;
		
		private int _DishId;
		
		private int _ProductId;
		
		private int _PrMass;
		
		private EntityRef<Dish> _Dish;
		
		private EntityRef<Product> _Product;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPortionIdChanging(int value);
    partial void OnPortionIdChanged();
    partial void OnDishIdChanging(int value);
    partial void OnDishIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnPrMassChanging(int value);
    partial void OnPrMassChanged();
    #endregion
		
		public Portion()
		{
			this._Dish = default(EntityRef<Dish>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PortionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PortionId
		{
			get
			{
				return this._PortionId;
			}
			set
			{
				if ((this._PortionId != value))
				{
					this.OnPortionIdChanging(value);
					this.SendPropertyChanging();
					this._PortionId = value;
					this.SendPropertyChanged("PortionId");
					this.OnPortionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DishId", DbType="Int NOT NULL")]
		public int DishId
		{
			get
			{
				return this._DishId;
			}
			set
			{
				if ((this._DishId != value))
				{
					if (this._Dish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDishIdChanging(value);
					this.SendPropertyChanging();
					this._DishId = value;
					this.SendPropertyChanged("DishId");
					this.OnDishIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrMass", DbType="Int NOT NULL")]
		public int PrMass
		{
			get
			{
				return this._PrMass;
			}
			set
			{
				if ((this._PrMass != value))
				{
					this.OnPrMassChanging(value);
					this.SendPropertyChanging();
					this._PrMass = value;
					this.SendPropertyChanged("PrMass");
					this.OnPrMassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_Portion", Storage="_Dish", ThisKey="DishId", OtherKey="DishId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Dish Dish
		{
			get
			{
				return this._Dish.Entity;
			}
			set
			{
				Dish previousValue = this._Dish.Entity;
				if (((previousValue != value) 
							|| (this._Dish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dish.Entity = null;
						previousValue.Portion.Remove(this);
					}
					this._Dish.Entity = value;
					if ((value != null))
					{
						value.Portion.Add(this);
						this._DishId = value.DishId;
					}
					else
					{
						this._DishId = default(int);
					}
					this.SendPropertyChanged("Dish");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Portion", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Portion.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Portion.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private string _Name;
		
		private System.Nullable<int> _Calories;
		
		private decimal _Price;
		
		private System.Nullable<int> _Proteins;
		
		private System.Nullable<int> _Fats;
		
		private System.Nullable<int> _Ca;
		
		private EntitySet<Portion> _Portion;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCaloriesChanging(System.Nullable<int> value);
    partial void OnCaloriesChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnProteinsChanging(System.Nullable<int> value);
    partial void OnProteinsChanged();
    partial void OnFatsChanging(System.Nullable<int> value);
    partial void OnFatsChanged();
    partial void OnCaChanging(System.Nullable<int> value);
    partial void OnCaChanged();
    #endregion
		
		public Product()
		{
			this._Portion = new EntitySet<Portion>(new Action<Portion>(this.attach_Portion), new Action<Portion>(this.detach_Portion));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Calories", DbType="Int")]
		public System.Nullable<int> Calories
		{
			get
			{
				return this._Calories;
			}
			set
			{
				if ((this._Calories != value))
				{
					this.OnCaloriesChanging(value);
					this.SendPropertyChanging();
					this._Calories = value;
					this.SendPropertyChanged("Calories");
					this.OnCaloriesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Proteins", DbType="Int")]
		public System.Nullable<int> Proteins
		{
			get
			{
				return this._Proteins;
			}
			set
			{
				if ((this._Proteins != value))
				{
					this.OnProteinsChanging(value);
					this.SendPropertyChanging();
					this._Proteins = value;
					this.SendPropertyChanged("Proteins");
					this.OnProteinsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fats", DbType="Int")]
		public System.Nullable<int> Fats
		{
			get
			{
				return this._Fats;
			}
			set
			{
				if ((this._Fats != value))
				{
					this.OnFatsChanging(value);
					this.SendPropertyChanging();
					this._Fats = value;
					this.SendPropertyChanged("Fats");
					this.OnFatsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ca", DbType="Int")]
		public System.Nullable<int> Ca
		{
			get
			{
				return this._Ca;
			}
			set
			{
				if ((this._Ca != value))
				{
					this.OnCaChanging(value);
					this.SendPropertyChanging();
					this._Ca = value;
					this.SendPropertyChanged("Ca");
					this.OnCaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Portion", Storage="_Portion", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<Portion> Portion
		{
			get
			{
				return this._Portion;
			}
			set
			{
				this._Portion.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Portion(Portion entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Portion(Portion entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Recall")]
	public partial class Recall : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecallId;
		
		private int _UserId;
		
		private int _DishId;
		
		private string _Text;
		
		private EntityRef<Dish> _Dish;
		
		private EntityRef<User> _User;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecallIdChanging(int value);
    partial void OnRecallIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnDishIdChanging(int value);
    partial void OnDishIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Recall()
		{
			this._Dish = default(EntityRef<Dish>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecallId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecallId
		{
			get
			{
				return this._RecallId;
			}
			set
			{
				if ((this._RecallId != value))
				{
					this.OnRecallIdChanging(value);
					this.SendPropertyChanging();
					this._RecallId = value;
					this.SendPropertyChanged("RecallId");
					this.OnRecallIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DishId", DbType="Int NOT NULL")]
		public int DishId
		{
			get
			{
				return this._DishId;
			}
			set
			{
				if ((this._DishId != value))
				{
					if (this._Dish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDishIdChanging(value);
					this.SendPropertyChanging();
					this._DishId = value;
					this.SendPropertyChanged("DishId");
					this.OnDishIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_Recall", Storage="_Dish", ThisKey="DishId", OtherKey="DishId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Dish Dish
		{
			get
			{
				return this._Dish.Entity;
			}
			set
			{
				Dish previousValue = this._Dish.Entity;
				if (((previousValue != value) 
							|| (this._Dish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dish.Entity = null;
						previousValue.Recall.Remove(this);
					}
					this._Dish.Entity = value;
					if ((value != null))
					{
						value.Recall.Add(this);
						this._DishId = value.DishId;
					}
					else
					{
						this._DishId = default(int);
					}
					this.SendPropertyChanged("Dish");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Recall", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Recall.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Recall.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Recept")]
	public partial class Recept : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReceptId;
		
		private int _DishId;
		
		private string _Specific;
		
		private EntityRef<Dish> _Dish;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceptIdChanging(int value);
    partial void OnReceptIdChanged();
    partial void OnDishIdChanging(int value);
    partial void OnDishIdChanged();
    partial void OnSpecificChanging(string value);
    partial void OnSpecificChanged();
    #endregion
		
		public Recept()
		{
			this._Dish = default(EntityRef<Dish>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceptId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReceptId
		{
			get
			{
				return this._ReceptId;
			}
			set
			{
				if ((this._ReceptId != value))
				{
					this.OnReceptIdChanging(value);
					this.SendPropertyChanging();
					this._ReceptId = value;
					this.SendPropertyChanged("ReceptId");
					this.OnReceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DishId", DbType="Int NOT NULL")]
		public int DishId
		{
			get
			{
				return this._DishId;
			}
			set
			{
				if ((this._DishId != value))
				{
					if (this._Dish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDishIdChanging(value);
					this.SendPropertyChanging();
					this._DishId = value;
					this.SendPropertyChanged("DishId");
					this.OnDishIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Specific", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Specific
		{
			get
			{
				return this._Specific;
			}
			set
			{
				if ((this._Specific != value))
				{
					this.OnSpecificChanging(value);
					this.SendPropertyChanging();
					this._Specific = value;
					this.SendPropertyChanged("Specific");
					this.OnSpecificChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_Recept", Storage="_Dish", ThisKey="DishId", OtherKey="DishId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Dish Dish
		{
			get
			{
				return this._Dish.Entity;
			}
			set
			{
				Dish previousValue = this._Dish.Entity;
				if (((previousValue != value) 
							|| (this._Dish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dish.Entity = null;
						previousValue.Recept.Remove(this);
					}
					this._Dish.Entity = value;
					if ((value != null))
					{
						value.Recept.Add(this);
						this._DishId = value.DishId;
					}
					else
					{
						this._DishId = default(int);
					}
					this.SendPropertyChanged("Dish");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Repast")]
	public partial class Repast : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RepastId;
		
		private string _Name;
		
		private EntitySet<MenuDish> _MenuDish;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRepastIdChanging(int value);
    partial void OnRepastIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Repast()
		{
			this._MenuDish = new EntitySet<MenuDish>(new Action<MenuDish>(this.attach_MenuDish), new Action<MenuDish>(this.detach_MenuDish));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepastId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RepastId
		{
			get
			{
				return this._RepastId;
			}
			set
			{
				if ((this._RepastId != value))
				{
					this.OnRepastIdChanging(value);
					this.SendPropertyChanging();
					this._RepastId = value;
					this.SendPropertyChanged("RepastId");
					this.OnRepastIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Repast_MenuDish", Storage="_MenuDish", ThisKey="RepastId", OtherKey="RepastId")]
		public EntitySet<MenuDish> MenuDish
		{
			get
			{
				return this._MenuDish;
			}
			set
			{
				this._MenuDish.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MenuDish(MenuDish entity)
		{
			this.SendPropertyChanging();
			entity.Repast = this;
		}
		
		private void detach_MenuDish(MenuDish entity)
		{
			this.SendPropertyChanging();
			entity.Repast = null;
		}
	}
}
#pragma warning restore 1591
